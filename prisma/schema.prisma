generator client {
  provider = "prisma-client"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id String @id @default(cuid())
  email String @unique
  displayName String
  createdAt DateTime @default(now())
  undatedAt DateTime @updatedAt
  userBooks UserBook[]

  @@map("users") // renames the table from User to users
}

model Book {
  id String @id @default(cuid())
  title String
  authors String[]
  description String?
  coverImageUrl String?
  genres String[]
  source String
  externalId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userBooks UserBook[]

  @@unique([source, externalId])
  @@map("books")
}

model UserBook {
  id          String   @id @default(cuid())
  userId      String
  bookId      String
  status      String
  progress    Float?
  currentPage Int?
  startedAt   DateTime?
  finishedAt  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user  User @relation(fields: [userId], references: [id], onDelete: Cascade)
  book  Book @relation(fields: [bookId], references: [id], onDelete: Cascade)
  analysis  BookAnalysis?
  playlists Playlist[]

  @@unique([userId, bookId])
  @@map("user_books")
}

model BookAnalysis {
  id            String   @id @default(cuid())
  userBookId    String   @unique
  analyzedAt    DateTime @default(now())
  
  mood              Json
  themes            String[]
  setting           Json
  pace              String
  intensity         String
  timeOfDay         String[]
  vibe              String
  musicDescription  String
  
  analysisSource String
  confidence     Float
  modelUsed      String
  
  userBook UserBook @relation(fields: [userBookId], references: [id], onDelete: Cascade)
  
  @@map("book_analyses")
}

model Playlist {
  id               String   @id @default(cuid())
  userBookId       String
  name             String
  description      String?
  totalDuration    Int
  generatedAt      DateTime @default(now())
  generationPrompt String
  
  spotifyPlaylistId      String?
  appleMusicPlaylistId   String?
  youtubeMusicPlaylistId String?
  
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  userBook UserBook        @relation(fields: [userBookId], references: [id], onDelete: Cascade)
  tracks   PlaylistTrack[]
  
  @@map("playlists")
}

model PlaylistTrack {
  id         String @id @default(cuid())
  playlistId String
  position   Int
  
  title    String
  artist   String
  album    String?
  duration Int
  
  spotifyId      String?
  appleMusicId   String?
  youtubeMusicId String?
  
  isInstrumental Boolean  @default(true)
  mood           String[]
  aiRationale    String?
  createdAt      DateTime @default(now())
  
  playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  
  @@unique([playlistId, position])
  @@map("playlist_tracks")
}